/**
 * Tier-Based Assessment Survey - Modern UI Design
 * Professional organizational assessment with clean, modern interface
 * Matches the design pattern from AI readiness workspace
 * 
 * @version 4.0.0 - Modern UI Update
 * @author NorthPath Strategies
 */

'use client';

import React, { useState, useEffect, useMemo, useCallback, Suspense } from 'react';
import { useSearchParams, useRouter } from 'next/navigation';
import { motion, AnimatePresence } from 'framer-motion';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { Badge } from '@/components/ui/badge';
import { CheckCircle, Circle, ArrowRight, ArrowLeft, Clock, Target, Building2, Users, TrendingUp } from 'lucide-react';
import { toast } from 'sonner';

import { 
  getTierConfiguration, 
  hasFeatureAccess, 
  validateTierAccess,
  type PricingTier 
} from '@/lib/tierConfiguration';
import { 
  getQuestionsForTier, 
  validateAssessmentResponses as validateResponses,
  type Question, 
  type OrganizationType 
} from '@/lib/enhancedQuestionBankV3';

interface AssessmentState {
  currentQuestionIndex: number;
  responses: Record<string, any>;
  organizationType: OrganizationType;
  institutionName: string;
  contactEmail: string;
  contactName: string;
  tier: string;  // Organizational assessment tiers only
  isComplete: boolean;
  validationErrors: string[];
  assessmentId?: string;
}

// Modern Assessment Question Component
const ModernQuestionCard = React.memo(({ 
  question, 
  value, 
  onResponse,
  questionNumber,
  totalQuestions 
}: { 
  question: Question; 
  value?: any; 
  onResponse: (questionId: string, value: any) => void;
  questionNumber: number;
  totalQuestions: number;
}) => {
  const handleOptionSelect = (optionValue: string | number) => {
    onResponse(question.id, optionValue);
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      transition={{ duration: 0.3 }}
      className="w-full max-w-4xl mx-auto"
    >
      <Card className="border-0 shadow-lg bg-white/95 backdrop-blur-sm">
        <CardHeader className="pb-6">
          <div className="flex items-center justify-between mb-4">
            <Badge variant="secondary" className="text-sm font-medium">
              {question.category || 'Organizational Assessment'}
            </Badge>
            <div className="text-sm text-muted-foreground">
              Question {questionNumber} of {totalQuestions}
            </div>
          </div>
          <CardTitle className="text-xl font-semibold text-gray-900 leading-tight">
            {question.text}
          </CardTitle>
          {question.helpText && (
            <p className="text-sm text-muted-foreground mt-2 leading-relaxed">
              {question.helpText}
            </p>
          )}
        </CardHeader>
        
        <CardContent className="pt-0">
          <div className="space-y-3">
            {question.options?.map((option, index) => (
              <motion.button
                key={option.value}
                onClick={() => handleOptionSelect(option.value)}
                className={`w-full p-4 text-left rounded-xl border-2 transition-all duration-200 ${
                  value === option.value
                    ? 'border-blue-500 bg-blue-50 shadow-md'
                    : 'border-gray-200 hover:border-gray-300 hover:bg-gray-50'
                }`}
                whileHover={{ scale: 1.01 }}
                whileTap={{ scale: 0.99 }}
                initial={{ opacity: 0, x: -10 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: index * 0.1 }}
              >
                <div className="flex items-center space-x-3">
                  <div className={`w-5 h-5 rounded-full border-2 flex items-center justify-center ${
                    value === option.value
                      ? 'border-blue-500 bg-blue-500'
                      : 'border-gray-300'
                  }`}>
                    {value === option.value && (
                      <div className="w-2 h-2 bg-white rounded-full" />
                    )}
                  </div>
                  <div className="flex-1">
                    <div className="font-medium text-gray-900">{option.label}</div>
                    {option.description && (
                      <div className="text-sm text-gray-600 mt-1">{option.description}</div>
                    )}
                  </div>
                </div>
              </motion.button>
            ))}
          </div>
        </CardContent>
      </Card>
    </motion.div>
  );
});
ModernQuestionCard.displayName = 'ModernQuestionCard';
const NumericInputQuestion: React.FC<{
  question: Question;
  value: number | undefined;
  onResponse: (questionId: string, response: number | undefined) => void;
}> = ({ question, value, onResponse }) => {
  const handleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
    const inputValue = e.target.value;
    // Handle empty string as undefined, otherwise parse as number
    const numericValue = inputValue === '' ? undefined : parseInt(inputValue);
    onResponse(question.id, numericValue);
  }, [onResponse, question.id]);

  return (
    <div className="space-y-2">
      <input
        type="number"
        value={value !== undefined ? value : ''}
        onChange={handleChange}
        min={question.validationRules?.min}
        max={question.validationRules?.max}
        className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
        placeholder="Enter numeric value"
      />
      {question.validationRules && (
        <p className="text-xs text-gray-500">
          Range: {question.validationRules.min} - {question.validationRules.max}
        </p>
      )}
    </div>
  );
});
NumericInput.displayName = 'NumericInput';

const TextInput = React.memo(({ question, value, onResponse }: { 
  question: Question; 
  value?: string; 
  onResponse: (questionId: string, value: any) => void;
}) => {
  const handleChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {
    onResponse(question.id, e.target.value);
  }, [onResponse, question.id]);

  const maxLength = question.validationRules?.maxLength || 1000; // Default to 1000 characters
  const minLength = question.validationRules?.min || 0;
  const currentLength = (value || '').length;
  const rows = maxLength > 500 ? 6 : 4; // More rows for longer expected responses

  return (
    <div className="space-y-2">
      <textarea
        value={value || ''}
        onChange={handleChange}
        rows={rows}
        maxLength={maxLength}
        className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-vertical"
        placeholder={maxLength > 500 ? "Please provide detailed responses. You can list multiple items, challenges, or considerations..." : "Enter your response here..."}
      />
      <div className="flex justify-between text-xs text-gray-500">
        <span>
          {currentLength} / {maxLength} characters
          {minLength > 0 && ` (minimum: ${minLength})`}
        </span>
        {maxLength > 500 && (
          <span className="text-blue-600">üí° Feel free to list multiple items or elaborate on different aspects</span>
        )}
      </div>
      {question.helpText && (
        <p className="text-xs text-gray-600">{question.helpText}</p>
      )}
    </div>
  );
});
TextInput.displayName = 'TextInput';

const ContextInput = React.memo(({ question, value, onResponse }: { 
  question: Question; 
  value?: string; 
  onResponse: (questionId: string, value: any) => void;
}) => {
  const handleChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {
    onResponse(`${question.id}_context`, e.target.value);
  }, [onResponse, question.id]);

  return (
    <div className="mt-4 p-4 bg-blue-50 border border-blue-200 rounded-lg">
      <label className="block text-sm font-medium text-blue-900 mb-2">
        üìù Provide Additional Context (Optional)
      </label>
      <p className="text-sm text-blue-700 mb-3">
        {question.contextPrompt || "Please provide any additional context, variations across departments, or unique circumstances that would help us better understand your organization's situation."}
      </p>
      <textarea
        value={value || ''}
        onChange={handleChange}
        rows={3}
        maxLength={500}
        className="w-full p-3 border border-blue-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-vertical bg-white"
        placeholder="Share additional details that help explain your response..."
      />
      <p className="text-xs text-blue-600 mt-1">
        {(value || '').length} / 500 characters ‚Ä¢ This helps our AI provide more tailored analysis
      </p>
    </div>
  );
});
ContextInput.displayName = 'ContextInput';

const FileUpload = React.memo(({ 
  question, 
  onFileUpload, 
  uploadedFiles 
}: { 
  question: Question;
  onFileUpload: (files: File[]) => void;
  uploadedFiles: File[];
}) => (
  <div className="space-y-4">
    <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
      <div className="h-8 w-8 text-gray-400 mx-auto mb-2 flex items-center justify-center text-2xl">üìÅ</div>
      <p className="text-gray-600 mb-2">Upload organizational charts, job descriptions, or budget documents</p>
      <input
        type="file"
        multiple
        accept=".pdf,.doc,.docx,.xls,.xlsx,.csv"
        onChange={(e) => onFileUpload(Array.from(e.target.files || []))}
        className="hidden"
        id={`upload-${question.id}`}
      />
      <label 
        htmlFor={`upload-${question.id}`}
        className="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 cursor-pointer"
      >
        Choose Files
      </label>
    </div>
    
    {uploadedFiles.length > 0 && (
      <div className="space-y-2">
        <p className="text-sm font-medium text-gray-700">Uploaded Files:</p>
        {uploadedFiles.map((file, index) => (
          <div key={index} className="flex items-center text-sm text-gray-600">
            <span className="text-green-500 mr-2">‚úì</span>
            {file.name}
          </div>
        ))}
      </div>
    )}
  </div>
));
FileUpload.displayName = 'FileUpload';

// Main Assessment Component with Modern UI
function TierBasedAssessmentContent() {
  const searchParams = useSearchParams();
  const router = useRouter();
  const [loading, setLoading] = useState(false);
  const [mounted, setMounted] = useState(false);

  // Derive tier and organization type from URL params
  const tierParam = searchParams.get('tier') || 'one-time-diagnostic';
  const orgParam = (searchParams.get('org') as OrganizationType) || 'higher-education';
  
  // Only organizational assessment tiers are supported in this app
  const organizationalTiers = [
    'express-diagnostic',
    'one-time-diagnostic', 
    'monthly-subscription',
    'comprehensive-package',
    'enterprise-transformation'
  ];
  
  // Validate tier parameter - redirect to default if invalid
  const validTier = organizationalTiers.includes(tierParam) ? tierParam : 'one-time-diagnostic';
  const assessmentType = 'organizational';

  // Assessment state
  const [assessmentState, setAssessmentState] = useState<AssessmentState>({
    currentQuestionIndex: 0,
    responses: {},
    organizationType: orgParam,
    institutionName: '',
    contactEmail: '',
    contactName: '',
    tier: validTier,
    isComplete: false,
    validationErrors: []
  });

  // Questions and tier configuration
  const questions = useMemo(() => {
    // This app only handles organizational assessments
    // AI readiness functionality has been moved to separate ai-readiness-app
    try {
      return getQuestionsForTier(assessmentState.tier as PricingTier);
    } catch (error) {
      console.error('Error loading questions:', error);
      return [];
    }
  }, [assessmentState.tier]);

  const tierConfig = useMemo(() => {
    try {
      return getTierConfiguration(assessmentState.tier as PricingTier);
    } catch (error) {
      console.error('Error loading tier config:', error);
      return null;
    }
  }, [assessmentState.tier]);

  // Ensure component is mounted on client
  useEffect(() => {
    setMounted(true);
  }, []);

  // Handle response changes
  const handleResponseChange = useCallback((questionId: string, value: any) => {
    setAssessmentState(prev => ({
      ...prev,
      responses: {
        ...prev.responses,
        [questionId]: value
      }
    }));
  }, []);

  // Navigation functions
  const goToNextQuestion = useCallback(() => {
    if (assessmentState.currentQuestionIndex < questions.length - 1) {
      setAssessmentState(prev => ({
        ...prev,
        currentQuestionIndex: prev.currentQuestionIndex + 1
      }));
    }
  }, [assessmentState.currentQuestionIndex, questions.length]);

  const goToPreviousQuestion = useCallback(() => {
    if (assessmentState.currentQuestionIndex > 0) {
      setAssessmentState(prev => ({
        ...prev,
        currentQuestionIndex: prev.currentQuestionIndex - 1
      }));
    }
  }, [assessmentState.currentQuestionIndex]);

  // Submit assessment
  const handleSubmit = useCallback(async () => {
    setLoading(true);
    
    try {
      // Validate organizational assessment responses
      const validation = validateResponses(
        assessmentState.responses, 
        assessmentState.tier as PricingTier, 
        assessmentState.organizationType
      );
      
      if (!validation.valid) {
        setAssessmentState(prev => ({
          ...prev,
          validationErrors: [`Missing required responses: ${validation.missingRequired.join(', ')}`]
        }));
        setLoading(false);
        return;
      }

      // Submit to organizational assessment API
      const response = await fetch('/api/assessment/submit', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          responses: assessmentState.responses,
          tier: assessmentState.tier,
          organizationType: assessmentState.organizationType,
          assessmentType: 'organizational'
        }),
      });

      if (response.ok) {
        const result = await response.json();
        setAssessmentState(prev => ({ ...prev, isComplete: true, assessmentId: result.assessmentId }));
        toast.success('Assessment submitted successfully!');
      } else {
        const error = await response.json();
        throw new Error(error.message || 'Failed to submit assessment');
      }
    } catch (error) {
      console.error('Assessment submission error:', error);
      toast.error('Failed to submit assessment. Please try again.');
    } finally {
      setLoading(false);
    }
  }, [assessmentState]);

  // Loading state
  if (!mounted || !questions.length) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 flex items-center justify-center">
        <Card className="w-full max-w-md border-0 shadow-lg">
          <CardContent className="p-8">
            <div className="text-center">
              <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
              <p className="text-gray-600 font-medium">Loading assessment...</p>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }
    'enterprise-transformation'
  ];
  
  // Validate tier parameter - redirect to default if invalid
  const validTier = organizationalTiers.includes(tierParam) ? tierParam : 'one-time-diagnostic';
  const assessmentType = 'organizational';

  // Initialize state with URL-derived tier and orgType
  const [assessmentState, setAssessmentState] = useState<AssessmentState>({
    currentSection: 0,
    responses: {},
    organizationType: orgParam,
    institutionName: '',
    contactEmail: '',
    contactName: '',
    tier: validTier,
    uploadedFiles: [],
    isComplete: false,
    validationErrors: []
  });
  
  // Ensure component is mounted on client to prevent hydration issues
  useEffect(() => {
    setMounted(true);
  }, []);
  
  // Validate URL parameters with fallbacks
  const validateTier = (tier: string | null): PricingTier => {
    const validOrgTiers: PricingTier[] = ['one-time-diagnostic', 'monthly-subscription', 'comprehensive-package', 'enterprise-transformation'];
    
    // Only return valid organizational tiers
    if (validOrgTiers.includes(tier as PricingTier)) {
      return tier as PricingTier;
    }
    
    // If invalid tier is requested, default to basic organizational tier
    // (AI readiness features are handled in separate ai-readiness-app)
    return 'one-time-diagnostic';
  };
  
  const validateOrgType = (orgType: string | null): OrganizationType => {
    const validOrgTypes: OrganizationType[] = ['higher-education', 'healthcare', 'nonprofit', 'corporate', 'government'];
    return validOrgTypes.includes(orgType as OrganizationType) ? orgType as OrganizationType : 'higher-education';
  };
  
  // Auto-save functionality
  const saveKey = useMemo(() => 
    `assessment-draft-${assessmentState.tier}-${assessmentState.organizationType}`,
    [assessmentState.tier, assessmentState.organizationType]
  );
  
  // Load saved assessment data on mount
  useEffect(() => {
    if (mounted && typeof window !== 'undefined') {
      const savedData = localStorage.getItem(saveKey);
      if (savedData) {
        try {
          const parsed = JSON.parse(savedData);
          // Only restore if the tier and org type match current URL params
          if (parsed.tier === assessmentState.tier && 
              parsed.organizationType === assessmentState.organizationType) {
            setAssessmentState(prev => ({
              ...prev,
              ...parsed,
              isComplete: false, // Never restore as complete
              validationErrors: [] // Clear any old errors
            }));
            
            setDataRestored(true);
            // Show notification that we restored data
            console.log('Assessment progress restored from previous session');
          }
        } catch (e) {
          console.warn('Could not restore assessment data:', e);
        }
      }
    }
  }, [mounted, assessmentState.tier, assessmentState.organizationType, saveKey]);
  
  // Auto-save assessment state changes (debounced)
  useEffect(() => {
    if (mounted && !assessmentState.isComplete) {
      const timeoutId = setTimeout(() => {
        const dataToSave = {
          ...assessmentState,
          lastSaved: new Date().toISOString()
        };
        localStorage.setItem(saveKey, JSON.stringify(dataToSave));
      }, 2000); // Save 2 seconds after last change
      
      return () => clearTimeout(timeoutId);
    }
  }, [assessmentState, mounted, saveKey]);
  
  // Clear saved data when assessment is submitted successfully
  const clearSavedData = useCallback(() => {
    if (typeof window !== 'undefined') {
      localStorage.removeItem(saveKey);
    }
  }, [saveKey]);

  // Get tier configuration and questions with safety checks
  const tierConfig = useMemo(() => {
    try {
      const config = getTierConfiguration(assessmentState.tier);
      if (!config) {
        console.error('Invalid tier configuration for:', assessmentState.tier);
        // Always return a valid config as fallback
        return getTierConfiguration('one-time-diagnostic') || {
          name: 'One-Time Diagnostic',
          price: 4995,
          targetCustomer: 'Default organizational assessment tier',
          coreDeliverables: ['Assessment and analysis'],
          assessmentScope: {
            questionCount: 50,
            sections: ['General Assessment'],
            algorithms: ['AIRIX'],
            reportPages: 8,
            followUpSupport: '30-min consultation'
          },
          features: {
            uploadSupport: true,
            dashboardRefresh: false,
            customReporting: false,
            powerBIEmbedded: false,
            apiConnectors: false,
            onSiteFacilitation: false,
            progressAudits: false,
            orgChartGenerator: true,
            scenarioBuilder: false,
            monteCarloSimulation: false,
            realTimeCollaboration: false,
            aiOpportunityAssessment: false,
            organizationalScore: true,
            automationRecommendations: false
          },
          guardrails: {
            maxAssessments: 1,
            maxUsers: 2,
            dataRetentionMonths: 3
          }
        };
      }
      return config;
    } catch (error) {
      console.error('Error getting tier configuration:', error);
      // Fallback to express-diagnostic if all else fails
      return {
        name: 'Express Diagnostic',
        price: 2495,
        targetCustomer: 'Default assessment tier',
        coreDeliverables: ['Assessment and analysis'],
        assessmentScope: {
          questionCount: 60,
          sections: ['General Assessment'],
          algorithms: ['OCI'],
          reportPages: 8,
          followUpSupport: '30-min consultation'
        },
        features: {
          uploadSupport: true,
          dashboardRefresh: false,
          customReporting: false,
          powerBIEmbedded: false,
          apiConnectors: false,
          onSiteFacilitation: false,
          progressAudits: false,
          orgChartGenerator: true,
          scenarioBuilder: false,
          monteCarloSimulation: false,
          realTimeCollaboration: false,
          aiOpportunityAssessment: false,
          organizationalScore: true,
          automationRecommendations: false
        },
        guardrails: {
          maxAssessments: 1,
          maxUsers: 2,
          dataRetentionMonths: 3
        }
      };
    }
  }, [assessmentState.tier]);
  
  const questions = useMemo(() => {
    // This app only handles organizational assessments
    // AI readiness functionality has been moved to separate ai-readiness-app
    return getQuestionsForTier(assessmentState.tier, assessmentState.organizationType);
  }, [assessmentState.tier, assessmentState.organizationType, assessmentType]);

  // Group questions by section
  const questionSections = useMemo(() => {
    const sections: Record<string, Question[]> = {};
    questions.forEach(q => {
      if (!sections[q.section]) sections[q.section] = [];
      sections[q.section].push(q);
    });
    return sections;
  }, [questions]);

  const sectionNames = Object.keys(questionSections);
  const currentSectionQuestions = questionSections[sectionNames[assessmentState.currentSection]] || [];
  
  // Calculate progress
  const totalQuestions = questions.length;
  const answeredQuestions = Object.keys(assessmentState.responses).length;
  const progressPercentage = totalQuestions > 0 ? (answeredQuestions / totalQuestions) * 100 : 0;

  // Validate tier access
  useEffect(() => {
    const validation = validateTierAccess(assessmentState.tier, {
      assessmentsUsed: 0, // Check if they can start a new assessment
      usersCount: 1
    });
    
    if (!validation.valid && validation.upgradeRequired) {
      setShowUpgrade(true);
    }
  }, [assessmentState.tier]);

  const handleResponse = useCallback((questionId: string, value: any) => {
    setAssessmentState(prev => ({
      ...prev,
      responses: {
        ...prev.responses,
        [questionId]: value
      }
    }));
  }, []);

  const handleFileUpload = (files: File[]) => {
    if (!hasFeatureAccess(assessmentState.tier, 'uploadSupport')) {
      setShowUpgrade(true);
      return;
    }
    
    setAssessmentState(prev => ({
      ...prev,
      uploadedFiles: [...prev.uploadedFiles, ...files]
    }));
  };

  const navigateSection = (direction: 'next' | 'prev') => {
    const newSection = direction === 'next' 
      ? Math.min(assessmentState.currentSection + 1, sectionNames.length - 1)
      : Math.max(assessmentState.currentSection - 1, 0);
    
    setAssessmentState(prev => ({
      ...prev,
      currentSection: newSection
    }));

    // Scroll to top of the page when navigating to a new section
    window.scrollTo({
      top: 0,
      behavior: 'smooth'
    });
  };

  const submitAssessment = async () => {
    setLoading(true);
    
    // Clear any previous validation errors
    setAssessmentState(prev => ({
      ...prev,
      validationErrors: []
    }));
    
    try {
      // Validate responses
      const aiReadinessTiers = [
        'higher-ed-ai-pulse-check',
        'ai-readiness-comprehensive',
        'ai-transformation-blueprint',
        'ai-enterprise-partnership'
      ];
      const isAI = aiReadinessTiers.includes(assessmentState.tier as string);
      if (isAI) {
        // For AI readiness assessments, validate with appropriate AI readiness tier
        let aiTier: 'higher-ed-ai-pulse-check' | 'ai-readiness-comprehensive' | 'ai-transformation-blueprint' | 'ai-enterprise-partnership';
        
        // Check URL params to determine if this is specifically a pulse check
        const tierParam = searchParams.get('tier');
        
        if (tierParam === 'higher-ed-ai-pulse-check') {
          aiTier = 'higher-ed-ai-pulse-check'; // 50 questions for pulse check
        } else if (assessmentState.tier === 'one-time-diagnostic') {
          aiTier = 'ai-readiness-comprehensive';
        } else if (assessmentState.tier === 'monthly-subscription') {
          aiTier = 'higher-ed-ai-pulse-check';
        } else if (assessmentState.tier === 'comprehensive-package') {
          aiTier = 'ai-transformation-blueprint';
        } else if (assessmentState.tier === 'enterprise-transformation') {
          aiTier = 'ai-enterprise-partnership';
        } else {
          aiTier = assessmentState.tier as 'higher-ed-ai-pulse-check' | 'ai-readiness-comprehensive' | 'ai-transformation-blueprint' | 'ai-enterprise-partnership';
        }
        
        const validation = validateResponses(
          assessmentState.responses, 
          aiTier,
          assessmentState.organizationType
        );
        
        if (!validation.valid) {
          setAssessmentState(prev => ({
            ...prev,
            validationErrors: [`Missing required responses: ${validation.missingRequired.join(', ')}`]
          }));
          setLoading(false);
          return;
        }
      } else {
        // For organizational assessments, use standard validation
        const validation = validateResponses(
          assessmentState.responses, 
          assessmentState.tier as Exclude<PricingTier, 'ai-readiness-basic' | 'ai-readiness-custom' | 'ai-readiness-advanced' | 'ai-readiness-comprehensive'>, 
          assessmentState.organizationType
        );
        
        if (!validation.valid) {
          setAssessmentState(prev => ({
            ...prev,
            validationErrors: [`Missing required responses: ${validation.missingRequired.join(', ')}`]
          }));
          setLoading(false);
          return;
        }
      }

      console.log('Submitting assessment with data:', {
        tier: assessmentState.tier,
        organizationType: assessmentState.organizationType,
        institutionName: assessmentState.institutionName,
        responseCount: Object.keys(assessmentState.responses).length,
        uploadedFileCount: assessmentState.uploadedFiles.length
      });

      // Determine API endpoint and request payload based on assessment type
      const apiEndpoint = assessmentType === 'ai-readiness' ? '/api/ai-readiness/submit' : '/api/assessment/submit';
      
      // Prepare request body based on assessment type
      const requestBody = assessmentType === 'ai-readiness' ? {
        responses: assessmentState.responses,
        tier: assessmentState.tier,
        industry: assessmentState.organizationType,
        institutionName: assessmentState.institutionName,
        contactEmail: assessmentState.contactEmail,
        contactName: assessmentState.contactName,
        uploadedFiles: assessmentState.uploadedFiles.map(f => ({ name: f.name, size: f.size, type: f.type })),
        assessmentType: 'ai-readiness'
      } : {
        tier: assessmentState.tier,
        organizationType: assessmentState.organizationType,
        institutionName: assessmentState.institutionName,
        contactEmail: assessmentState.contactEmail,
        contactName: assessmentState.contactName,
        responses: assessmentState.responses,
        uploadedFiles: assessmentState.uploadedFiles.map(f => ({ name: f.name, size: f.size, type: f.type }))
      };

      // Use AbortController to handle cleanup if component unmounts
      const abortController = new AbortController();
      const timeoutId = setTimeout(() => abortController.abort(), 30000); // 30 second timeout

      try {
        const response = await fetch(apiEndpoint, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(requestBody),
          signal: abortController.signal
        });

        clearTimeout(timeoutId);
        const result = await response.json();
        
        if (response.ok) {
          console.log('Assessment submitted successfully:', result);
          clearSavedData(); // Clear auto-saved draft data
          console.log('Submission result payload:', result);
          setAssessmentState(prev => ({
            ...prev,
            isComplete: true,
            assessmentId: result.assessmentId || result.id // Store the assessment ID returned as id
          }));
          
          // Remove automatic redirect - let user control their next step
          // if (result.redirectUrl) {
          //   setTimeout(() => {
          //     window.location.href = result.redirectUrl;
          //   }, 2000);
          // }
        } else {
          console.error('Assessment submission failed:', result);
          throw new Error(result.error || 'Assessment submission failed');
        }
      } catch (fetchError) {
        clearTimeout(timeoutId);
        if (fetchError instanceof Error && fetchError.name === 'AbortError') {
          throw new Error('Request timed out. Please try again.');
        }
        throw fetchError;
      }
    } catch (error) {
      console.error('Error submitting assessment:', error);
      setAssessmentState(prev => ({
        ...prev,
        validationErrors: [error instanceof Error ? error.message : 'Failed to submit assessment. Please try again.']
      }));
    } finally {
      setLoading(false);
    }
  };

  if (assessmentState.isComplete) {
    // Additional safety check for success state
    if (!tierConfig || !tierConfig.name) {
      // Custom complete UI for AI readiness tiers (including pulse check and other AI tiers)
      if ([
        'higher-ed-ai-pulse-check',
        'ai-readiness-comprehensive',
        'ai-transformation-blueprint',
        'ai-enterprise-partnership'
      ].includes(assessmentState.tier)) {
        return (
          <div className="max-w-4xl mx-auto p-6">
            <Card>
              <CardHeader className="text-center">
                <div className="text-6xl text-green-500 mx-auto mb-4">‚úÖ</div>
                <CardTitle className="text-2xl text-green-700">AI Readiness Assessment Submitted!</CardTitle>
              </CardHeader>
              <CardContent className="text-center space-y-4">
                <p className="text-gray-600">
                  Thank you! Your AI Readiness Assessment has been submitted successfully.
                </p>
                <p className="text-sm text-gray-500">
                  You will receive your detailed report at <strong>{assessmentState.contactEmail}</strong> within 3-5 business days.
                </p>
              </CardContent>
            </Card>
          </div>
        );
      }
      // Fallback for missing tier config
      return (
        <div className="max-w-4xl mx-auto p-6">
          <Card>
            <CardHeader className="text-center">
              <div className="text-6xl text-green-500 mx-auto mb-4">‚úÖ</div>
              <CardTitle className="text-2xl text-green-700">Assessment Complete!</CardTitle>
            </CardHeader>
            <CardContent className="text-center">
              <p className="text-gray-600">Your assessment has been submitted successfully.</p>
              <p className="text-sm text-gray-500 mt-4">Processing time: 3-5 business days</p>
            </CardContent>
          </Card>
        </div>
      );
    }
    
    return (
      <div className="max-w-4xl mx-auto p-6">
        <Card>
          <CardHeader className="text-center">
            <div className="text-6xl text-green-500 mx-auto mb-4">‚úÖ</div>
            <CardTitle className="text-2xl text-green-700">Assessment Complete!</CardTitle>
            {assessmentState.assessmentId && (
              <p className="text-sm text-gray-500 mt-2">
                Assessment ID: <code className="bg-gray-100 px-2 py-1 rounded">{assessmentState.assessmentId}</code>
              </p>
            )}
          </CardHeader>
          <CardContent className="text-center space-y-6">
            <p className="text-gray-600">
              Your {tierConfig?.name || 'assessment'} assessment has been submitted successfully.
            </p>
            
            <div className="bg-blue-50 p-4 rounded-lg">
              <h3 className="font-semibold text-blue-900 mb-2">What happens next:</h3>
              <ul className="text-sm text-blue-800 space-y-1 text-left">
                {tierConfig?.coreDeliverables?.map((deliverable, index) => (
                  <li key={index} className="flex items-start">
                    <span className="text-blue-600 mr-2 mt-0.5 flex-shrink-0">‚úì</span>
                    {deliverable}
                  </li>
                )) || <li>Analysis will be completed within 3-5 business days</li>}
              </ul>
            </div>
            
            <div className="bg-green-50 p-4 rounded-lg">
              <h3 className="font-semibold text-green-900 mb-2">Email Confirmation</h3>
              <p className="text-sm text-green-800">
                A confirmation email has been sent to <strong>{assessmentState.contactEmail}</strong> with your assessment details and next steps.
              </p>
            </div>
            
            <p className="text-sm text-gray-500">
              <strong>Processing time:</strong> {tierConfig?.assessmentScope?.followUpSupport || '3-5 business days'}
            </p>
            
            {/* One-Time Diagnostic Upsell Section */}
            {assessmentState.tier === 'one-time-diagnostic' && (
              <div className="bg-gradient-to-r from-blue-50 to-purple-50 p-6 rounded-lg border border-blue-200">
                <h3 className="font-bold text-blue-900 mb-3 text-lg">üöÄ Ready to Go Deeper?</h3>
                <p className="text-blue-800 mb-4">
                  Your Express Diagnostic has identified key areas for improvement. Take the next step with our comprehensive assessments for deeper insights and actionable roadmaps.
                </p>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                  <div className="bg-white p-4 rounded-lg border border-blue-100">
                    <h4 className="font-semibold text-blue-900 mb-2">One-Time Diagnostic</h4>
                    <p className="text-2xl font-bold text-green-600 mb-1">$4,995</p>
                    <p className="text-sm text-blue-700 mb-2">100+ questions ‚Ä¢ 35-page AI report ‚Ä¢ Advanced analysis</p>
                    <ul className="text-xs text-blue-600 space-y-1">
                      <li>‚úì Complete organizational analysis</li>
                      <li>‚úì Advanced AI opportunity identification</li>
                      <li>‚úì 45-min strategy consultation</li>
                    </ul>
                  </div>
                  
                  <div className="bg-white p-4 rounded-lg border border-purple-100">
                    <h4 className="font-semibold text-purple-900 mb-2">Monthly Subscription</h4>
                    <p className="text-2xl font-bold text-green-600 mb-1">$2,995/mo</p>
                    <p className="text-sm text-purple-700 mb-2">Unlimited assessments ‚Ä¢ Dashboard ‚Ä¢ ROI modeling</p>
                    <ul className="text-xs text-purple-600 space-y-1">
                      <li>‚úì Perfect for iterative improvement</li>
                      <li>‚úì Track progress over time</li>
                      <li>‚úì Monthly strategy calls</li>
                    </ul>
                  </div>
                </div>
                
                <div className="flex flex-col sm:flex-row gap-3 justify-center">
                  <Button
                    onClick={() => window.location.href = `/assessment/tier-based?tier=one-time-diagnostic&org=${assessmentState.organizationType}`}
                    className="px-6 py-3 bg-blue-600 hover:bg-blue-700"
                  >
                    Upgrade to One-Time Diagnostic
                  </Button>
                  <Button
                    onClick={() => window.location.href = `/assessment/tier-based?tier=monthly-subscription&org=${assessmentState.organizationType}`}
                    className="px-6 py-3 bg-purple-600 hover:bg-purple-700"
                  >
                    Start Monthly Subscription
                  </Button>
                </div>
              </div>
            )}
            
            {/* Action Buttons */}
            <div className="flex flex-col sm:flex-row gap-4 justify-center mt-6">
              <Button
                onClick={() => window.location.href = '/'}
                variant="outline"
                className="px-6 py-3"
              >
                Return to Home
              </Button>
              <Button
                onClick={() => window.location.href = `/assessment/tier-based?tier=${assessmentState.tier}&org=${assessmentState.organizationType}`}
                variant="outline"
                className="px-6 py-3"
              >
                Start New Assessment
              </Button>
              {(assessmentState.tier === 'one-time-diagnostic' || assessmentState.tier === 'monthly-subscription') && (
                <Button
                  onClick={() => window.location.href = `/assessment/tier-based?tier=comprehensive-package&org=${assessmentState.organizationType}`}
                  className="px-6 py-3 bg-green-600 hover:bg-green-700"
                >
                  Upgrade to Comprehensive
                </Button>
              )}
              {assessmentState.tier !== 'enterprise-transformation' && (
                <Button
                  onClick={() => window.location.href = `/assessment/tier-based?tier=enterprise-transformation&org=${assessmentState.organizationType}`}
                  className="px-6 py-3 bg-blue-600 hover:bg-blue-700"
                >
                  Upgrade to Enterprise
                </Button>
              )}
            </div>
            
            <div className="border-t pt-4 mt-6">
              <p className="text-xs text-gray-500">
                Need help? Contact us at support@northpathstrategies.com or save your Assessment ID for reference.
              </p>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  if (showUpgrade) {
    return (
      <div className="max-w-4xl mx-auto p-6">
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center text-amber-600">
              <span className="text-amber-600 mr-2">‚ö†Ô∏è</span>
              Upgrade Required
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <p>The feature you&apos;re trying to access requires a higher service tier.</p>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {(() => {
                const comprehensiveConfig = getTierConfiguration('comprehensive-package');
                const enterpriseConfig = getTierConfiguration('enterprise-transformation');
                
                return [
                  comprehensiveConfig && { key: 'comprehensive', tier: comprehensiveConfig },
                  enterpriseConfig && { key: 'enterprise', tier: enterpriseConfig }
                ].filter(Boolean).map(({ key, tier }) => (
                  <div key={key} className="p-4 border rounded-lg">
                    <h3 className="font-semibold">{tier.name}</h3>
                    <p className="text-2xl font-bold text-green-600">${tier.price.toLocaleString()}</p>
                    <p className="text-sm text-gray-600">{tier.targetCustomer}</p>
                  </div>
                ));
              })()}
            </div>
            <Button onClick={() => setShowUpgrade(false)} variant="outline">
              Continue with Current Tier
            </Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  if (!mounted) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">Loading assessment...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50">
      <div className="max-w-5xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Modern Header with Enhanced Progress Tracking */}
        <div className="mb-8">
          <div className="text-center mb-6">
            <div className="inline-flex items-center px-4 py-2 bg-blue-100 text-blue-800 rounded-full text-sm font-medium mb-4">
              <svg className="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20">
                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
              </svg>
              {tierConfig?.name || 'Organizational Assessment'}
            </div>
            <h1 className="text-3xl font-bold text-gray-900 mb-2">
              Organizational Realignment Assessment
            </h1>
            <p className="text-gray-600 max-w-2xl mx-auto">
              Discover organizational inefficiencies and unlock strategic opportunities with our comprehensive assessment
            </p>
          </div>
          
          {/* Enhanced Progress Bar */}
          <div className="w-full max-w-2xl mx-auto">
            <div className="flex justify-between items-center mb-2">
              <span className="text-sm font-medium text-gray-700">
                Question {assessmentState.currentQuestionIndex + 1} of {questions.length}
              </span>
              <span className="text-sm text-gray-500">
                {Math.round(((assessmentState.currentQuestionIndex + 1) / questions.length) * 100)}% Complete
              </span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-3 overflow-hidden">
              <div 
                className="bg-gradient-to-r from-blue-500 to-indigo-600 h-3 rounded-full transition-all duration-500 ease-out"
                style={{ width: `${((assessmentState.currentQuestionIndex + 1) / questions.length) * 100}%` }}
              />
            </div>
          </div>
        </div>

        {/* Main Assessment Card */}
        <Card className="border-0 shadow-xl bg-white/95 backdrop-blur-sm">
          <CardContent className="p-8">
            {/* Current Question */}
            {questions.length > 0 && (
              <div className="space-y-6">
                <div className="text-center mb-8">
                  <h2 className="text-xl font-semibold text-gray-900 mb-4">
                    {questions[assessmentState.currentQuestionIndex]?.question || 'Loading question...'}
                  </h2>
                  {questions[assessmentState.currentQuestionIndex]?.description && (
                    <p className="text-gray-600 text-sm max-w-3xl mx-auto">
                      {questions[assessmentState.currentQuestionIndex].description}
                    </p>
                  )}
                </div>

                {/* Question Input */}
                <div className="max-w-2xl mx-auto">
                  <QuestionInput
                    question={{
                      id: questions[assessmentState.currentQuestionIndex]?.id || '',
                      prompt: questions[assessmentState.currentQuestionIndex]?.question || '',
                      type: questions[assessmentState.currentQuestionIndex]?.type || 'text',
                      required: questions[assessmentState.currentQuestionIndex]?.required,
                      options: questions[assessmentState.currentQuestionIndex]?.options,
                      section: questions[assessmentState.currentQuestionIndex]?.section || 'General',
                      helpText: questions[assessmentState.currentQuestionIndex]?.description
                    }}
                    value={assessmentState.responses[questions[assessmentState.currentQuestionIndex]?.id] || ''}
                    onChange={(value) => handleResponseChange(questions[assessmentState.currentQuestionIndex]?.id, value)}
                    isFlagged={false}
                    onFlagChange={() => {}}
                    disabled={loading}
                  />
                </div>

                {/* Navigation Buttons */}
                <div className="flex justify-between items-center mt-8 pt-6 border-t">
                  <Button
                    variant="outline"
                    onClick={goToPreviousQuestion}
                    disabled={assessmentState.currentQuestionIndex === 0 || loading}
                    className="px-6 py-2.5 rounded-lg border-gray-300 hover:bg-gray-50"
                  >
                    <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                    </svg>
                    Previous
                  </Button>

                  <div className="flex space-x-3">
                    {assessmentState.currentQuestionIndex === questions.length - 1 ? (
                      <Button
                        onClick={handleSubmit}
                        disabled={loading}
                        className="px-8 py-2.5 bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white rounded-lg shadow-lg"
                      >
                        {loading ? (
                          <div className="flex items-center">
                            <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                            Submitting...
                          </div>
                        ) : (
                          'Complete Assessment'
                        )}
                      </Button>
                    ) : (
                      <Button
                        onClick={goToNextQuestion}
                        disabled={loading}
                        className="px-6 py-2.5 bg-gradient-to-r from-blue-500 to-indigo-600 hover:from-blue-600 hover:to-indigo-700 text-white rounded-lg shadow-lg"
                      >
                        Next
                        <svg className="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                        </svg>
                      </Button>
                    )}
                  </div>
                </div>
              </div>
            )}

            {/* Validation Errors */}
            {assessmentState.validationErrors && assessmentState.validationErrors.length > 0 && (
              <div className="mt-6 p-4 bg-red-50 border border-red-200 rounded-lg">
                <div className="flex items-center">
                  <svg className="w-5 h-5 text-red-400 mr-2" fill="currentColor" viewBox="0 0 20 20">
                    <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                  </svg>
                  <h3 className="text-sm font-medium text-red-800">Please complete all required fields:</h3>
                </div>
                <ul className="mt-2 text-sm text-red-700 list-disc list-inside">
                  {assessmentState.validationErrors.map((error, index) => (
                    <li key={index}>{error}</li>
                  ))}
                </ul>
              </div>
            )}
          </CardContent>
        </Card>

        {/* Tier Information Card */}
        <Card className="mt-6 border-0 shadow-lg bg-gradient-to-r from-blue-50 to-indigo-50">
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <h3 className="font-semibold text-gray-900">{tierConfig?.name}</h3>
                <p className="text-sm text-gray-600">{tierConfig?.targetCustomer}</p>
              </div>
              <div className="text-right">
                <div className="text-2xl font-bold text-green-600">
                  ${tierConfig?.price?.toLocaleString() || '0'}
                </div>
                <p className="text-xs text-gray-500">One-time fee</p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
                  assessmentState.tier === 'higher-ed-ai-pulse-check' ? '$1,995' : '$4,995'
                ) : (
                  `$${tierConfig?.price?.toLocaleString() || '4,995'}`
                )}
              </span>
              <p className="text-sm text-gray-500">
                {assessmentType === 'ai-readiness' ? (
                  assessmentState.tier === 'higher-ed-ai-pulse-check' ? '8 page report' : '15 page report'
                ) : (
                  `${tierConfig?.assessmentScope?.reportPages || 15} page report`
                )}
              </p>
            </div>
          </div>
        </CardHeader>
      </Card>

      {/* Progress indicator */}
      <Card className="mb-6">
        <CardContent className="pt-6">
          <div className="flex justify-between items-center mb-4">
            <span className="text-sm font-medium text-gray-700">Progress: {answeredQuestions} of {questions.length} questions</span>
            <span className="text-sm font-medium text-blue-600">{Math.round((answeredQuestions / questions.length) * 100)}% complete</span>
          </div>
          <Progress value={(answeredQuestions / questions.length) * 100} className="w-full" />
          
          {/* Section completion indicators */}
          <div className="flex flex-wrap gap-2 mt-4">
            {sectionNames.map((section, index) => {
              const sectionQuestions = questions.filter(q => q.section === section);
              const sectionAnswered = sectionQuestions.filter(q => 
                assessmentState.responses[q.id] !== undefined && assessmentState.responses[q.id] !== ''
              ).length;
              
              return (
                <button
                  key={section}
                  onClick={() => setAssessmentState(prev => ({ ...prev, currentSection: index }))}
                  className={`px-3 py-1 text-xs rounded-full transition-colors ${
                    index === assessmentState.currentSection
                      ? 'bg-blue-600 text-white'
                      : sectionAnswered === sectionQuestions.length
                      ? 'bg-green-100 text-green-800'
                      : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                  }`}
                >
                  {section}
                  {sectionAnswered === sectionQuestions.length && (
                    <span className="ml-1 inline text-green-600">‚úì</span>
                  )}
                </button>
              );
            })}
          </div>
        </CardContent>
      </Card>

      {/* Restored Data Notification */}
      {dataRestored && (
        <Alert className="mb-6 bg-blue-50 border-blue-200">
          <span className="text-blue-600 mr-2">üîÑ</span>
          <AlertDescription className="text-blue-800">
            Welcome back! We've restored your previous assessment progress. You can continue where you left off.
            <button 
              onClick={() => setDataRestored(false)}
              className="ml-2 text-blue-600 underline text-sm"
            >
              Dismiss
            </button>
          </AlertDescription>
        </Alert>
      )}

      {/* Error Messages */}
      {assessmentState.validationErrors.length > 0 && (
        <Alert className="mb-6">
          <span className="text-red-600 mr-2">‚ö†Ô∏è</span>
          <AlertDescription>
            {assessmentState.validationErrors.join('; ')}
          </AlertDescription>
        </Alert>
      )}

      {/* Contact Information Section - shown only on first section */}
      {assessmentState.currentSection === 0 && (
        <Card className="mb-6">
          <CardHeader>
            <CardTitle className="text-lg">Contact Information</CardTitle>
            <p className="text-sm text-gray-600">
              We&apos;ll use this information to send you updates about your assessment and results.
            </p>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <label htmlFor="institutionName" className="block text-sm font-medium text-gray-700 mb-2">
                Institution/Organization Name *
              </label>
              <input
                id="institutionName"
                type="text"
                value={assessmentState.institutionName}
                onChange={(e) => setAssessmentState(prev => ({ ...prev, institutionName: e.target.value }))}
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder="Enter your institution or organization name"
                required
              />
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label htmlFor="contactName" className="block text-sm font-medium text-gray-700 mb-2">
                  Your Name
                </label>
                <input
                  id="contactName"
                  type="text"
                  value={assessmentState.contactName}
                  onChange={(e) => setAssessmentState(prev => ({ ...prev, contactName: e.target.value }))}
                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  placeholder="Enter your full name"
                />
              </div>
              
              <div>
                <label htmlFor="contactEmail" className="block text-sm font-medium text-gray-700 mb-2">
                  Email Address *
                </label>
                <input
                  id="contactEmail"
                  type="email"
                  value={assessmentState.contactEmail}
                  onChange={(e) => setAssessmentState(prev => ({ ...prev, contactEmail: e.target.value }))}
                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  placeholder="Enter your email address"
                  required
                />
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Assessment Questions */}
      <Card className="mb-6">
        <CardHeader>
          <CardTitle className="text-xl">{currentSectionName}</CardTitle>
          <p className="text-sm text-gray-600">
            Section {assessmentState.currentSection + 1} of {sectionNames.length}
          </p>
        </CardHeader>
        <CardContent className="space-y-8">
          {currentQuestions.map((question) => {
            const response = assessmentState.responses[question.id];
            const contextResponse = assessmentState.responses[`${question.id}_context`];
            
            return (
              <div key={question.id} className="border-b border-gray-200 pb-6 last:border-b-0">
                <div className="mb-4">
                  <h3 className="text-lg font-medium text-gray-900 mb-2">
                    {question.prompt}
                    {question.required && <span className="text-red-500 ml-1">*</span>}
                  </h3>
                  {question.helpText && (
                    <p className="text-sm text-gray-500 mb-3">{question.helpText}</p>
                  )}
                  
                  {question.type === 'likert' && (
                    <>
                      <p className="text-sm text-gray-600 mb-3">
                        {question.helpText || "Rate your agreement with this statement."}
                      </p>
                      <LikertInput
                        question={question}
                        value={response as number}
                        onResponse={handleResponse}
                      />
                    </>
                  )}
                  
                  {question.type === 'numeric' && (
                    <NumericInput
                      question={question}
                      value={response as number}
                      onResponse={handleResponse}
                    />
                  )}
                  
                  {question.type === 'text' && (
                    <TextInput
                      question={question}
                      value={response as string}
                      onResponse={handleResponse}
                    />
                  )}
                  
                  {question.type === 'upload' && (
                    <FileUpload
                      question={question}
                      onFileUpload={handleFileUpload}
                      uploadedFiles={assessmentState.uploadedFiles}
                    />
                  )}
                  
                  {question.enableContext && (
                    <ContextInput
                      question={question}
                      value={contextResponse as string}
                      onResponse={handleResponse}
                    />
                  )}
                </div>
              </div>
            );
          })}
        </CardContent>
      </Card>

      {/* Navigation */}
      <div className="flex justify-between items-center mb-6">
        <div className="flex items-center space-x-4">
          <Button
            onClick={() => navigateSection('prev')}
            disabled={assessmentState.currentSection === 0}
            variant="outline"
          >
            Previous Section
          </Button>
          
          {/* Auto-save status */}
          <div className="text-sm text-gray-500 flex items-center">
            <span className="w-2 h-2 bg-green-400 rounded-full mr-2"></span>
            Progress auto-saved
          </div>
        </div>
        
        <div className="space-x-4 flex items-center">
          {/* Manual save button */}
          <Button
            onClick={() => {
              const dataToSave = {
                ...assessmentState,
                lastSaved: new Date().toISOString()
              };
              localStorage.setItem(saveKey, JSON.stringify(dataToSave));
              alert('Assessment progress saved! You can return to complete it later.');
            }}
            variant="outline"
            size="sm"
          >
            üíæ Save Progress
          </Button>
          
          {assessmentState.currentSection === sectionNames.length - 1 ? (
            <Button
              onClick={submitAssessment}
              disabled={loading}
              className="bg-green-600 hover:bg-green-700"
            >
              {loading ? (
                <>
                  <span className="mr-2 animate-spin">‚è≥</span>
                  Submitting...
                </>
              ) : (
                'Submit Assessment'
              )}
            </Button>
          ) : (
            <Button
              onClick={() => navigateSection('next')}
              disabled={assessmentState.currentSection === sectionNames.length - 1}
            >
              Next Section
            </Button>
          )}
        </div>
      </div>

      {/* Show package summary only for organizational tiers */}
      {assessmentType === 'organizational' && (
        <Card className="mt-8">
          <CardHeader>
            <CardTitle className="text-lg">Your {tierConfig?.name || 'Assessment'} Package Includes:</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <h4 className="font-semibold mb-2">Assessment Scope:</h4>
                <ul className="text-sm space-y-1">
                  <li>‚Ä¢ {tierConfig?.assessmentScope?.questionCount || 0} targeted questions</li>
                  <li>‚Ä¢ {tierConfig?.assessmentScope?.algorithms?.join(', ') || 'Standard'} analysis algorithms</li>
                  <li>‚Ä¢ {tierConfig?.assessmentScope?.reportPages || 0} page comprehensive report</li>
                </ul>
              </div>
              <div>
                <h4 className="font-semibold mb-2">Included Features:</h4>
                <ul className="text-sm space-y-1">
                  {tierConfig?.features?.uploadSupport && <li>‚Ä¢ Secure file upload capability</li>}
                  {tierConfig?.features?.dashboardRefresh && <li>‚Ä¢ Dashboard refresh & CSV exports</li>}
                  {tierConfig?.features?.powerBIEmbedded && <li>‚Ä¢ Power BI embedded dashboards</li>}
                  {tierConfig?.features?.scenarioBuilder && <li>‚Ä¢ Scenario modeling tools</li>}
                  {tierConfig?.features?.monteCarloSimulation && <li>‚Ä¢ Monte Carlo simulations</li>}
                </ul>
              </div>
            </div>
          </CardContent>
        </Card>
      )}
      </div>
    </div>
  );
}

export default function TierBasedAssessment() {
  return (
    <Suspense fallback={
      <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-indigo-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">Loading assessment...</p>
        </div>
      </div>
    }>
      <TierBasedAssessmentContent />
    </Suspense>
  );
}
